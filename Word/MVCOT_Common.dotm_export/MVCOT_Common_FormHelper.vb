Attribute VB_Name = "FormHelper"
Public Const REQUIRED_COLOUR = 8421631
Public Const STANDARD_COLOUR = 8421504
Public Const LONG_DATE = "d MMMM yyyy"

Public Sub Setup()
    
    If ActiveDocument.Type = wdTypeTemplate Then
        If MsgBox("You are about to edit a template, are you sure you want to do this?", _
            vbYesNo + vbCritical) = vbNo Then End
    End If

    Application.ScreenUpdating = False
End Sub

Public Sub TearDown(frmToUnload As UserForm, Optional boolSaveAs As Boolean = False)
    If ActiveDocument.ActiveWindow.View <> wdPrintView Then _
        ActiveDocument.ActiveWindow.View = wdPrintView
    
    If ActiveDocument.Bookmarks.Exists("bkmCursorStart") Then _
        ActiveDocument.Bookmarks("bkmCursorStart").Select
        
    Application.ScreenUpdating = True

    Unload frmToUnload
    If (boolSaveAs) Then
        With Application.Dialogs(wdDialogFileSaveAs)
            .Format = wdFormatDocument
            .Show
        End With
    End If
End Sub

Sub PopulateUserPicker(cbo As ComboBox, Optional strSelected As String = "")
    Dim aUsers As Variant
    Dim iPos As Integer
    aUsers = IniOP.LoadIniSectionsArray(strUserIni)
    
    cbo.Clear
    For iPos = LBound(aUsers) To UBound(aUsers)
        cbo.AddItem aUsers(iPos)
    Next iPos
    
    If strSelected <> "" Then
        cbo.Value = strSelected
    Else
        cbo.Value = GetActiveUser
    End If
End Sub

Sub PopulateSignatorySection(aFields, frm As UserForm, Optional IncludeWorkunit As Boolean = False, _
                                Optional FieldPrefix As String = "")
    Dim strUser As String
    Dim iFPos As Integer
    Dim strField As String
    strUser = frm.cboUserPickList.Value
    
    For iFPos = LBound(aFields) To UBound(aFields)
        strField = CStr(aFields(iFPos))
        frm.Controls("txt" & FieldPrefix & strField).Value = GetUserSetting(strField, strUser)
    Next iFPos
    
    If IncludeWorkunit Then frm.cboWorkUnit.Value = GetUserSetting("Workunit", strUser)
End Sub

Function CheckMandatoryFields(frm As UserForm) As Boolean
    On Error GoTo CheckMandatoryFields_Err
    Dim ctl As control
    ' Check mandatory fields. (Denoted by a red border)
    For Each ctl In frm.Controls
        If Left(ctl.Name, 3) = "txt" Or Left(ctl.Name, 3) = "cbo" Then
            Debug.Print "Checking " & ctl.Name & " as mandatory"
            Dim strMsg As String
            CheckMandatoryFields = True
            ' need lots of nested statements because VBA doesnt support
            ' short circuit evaluation of expressions, whhhhyyyyy
            If ctl.Object.BorderColor = REQUIRED_COLOUR And ctl.Object.Value = "" Then
                strMsg = ctl.ControlTipText
                If strMsg = "" Then strMsg = "This is a required field."
                CheckMandatoryFields = False
            ElseIf ctl.Object.Value <> "" And InStr(ctl.Name, "Date") And Not IsDate(ctl.Value) Then
                strMsg = "A valid date format is required" & vbCr & vbCr & ctl.ControlTipText
                CheckMandatoryFields = False
            End If
            
            If Not CheckMandatoryFields Then
                MsgBox strMsg, vbError
                ctl.SetFocus
                Exit Function
            End If
        End If
    Next ctl
    
    CheckMandatoryFields = True
    Exit Function
    
CheckMandatoryFields_Err:
    ' Catch non focusable error and go up the parent
    ' heirachy until it works
    If Err.Number = 2110 Then
        FocusPage ctl
        ctl.SetFocus
    Else
        Msg = "Error # " & Str(Err.Number) & " was generated by " _
         & Err.Source & Chr(13) & "Error Line: " & Erl & Chr(13) & Err.Description
        MsgBox Msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
    Resume Next
End Function

Private Sub FocusPage(ctl As control)
    Debug.Print "Looking at " & ctl.Name
    If TypeName(ctl) = "Page" Then
        Dim pg As MSForms.Page
        Set pg = ctl
        pg.Parent.Value = pg.Index
    Else
        FocusPage ctl.Parent
    End If
End Sub

Sub CancelForm(Form As UserForm, Optional TemplateName As String = "Document", Optional CloseDocument As Boolean = True)
    If MsgBox("Are you sure you want to cancel this " & TemplateName & "?", _
        vbYesNo + vbQuestion, "Are you sure?") = vbYes Then
        Unload Form
        If CloseDocument Then ActiveDocument.Close (wdDoNotSaveChanges)
    End If
End Sub

Sub PopulateMinisterList(Destination As ComboBox, Optional Ministers As Variant, Optional Default As Boolean = True)
    
    'Dim Ministers() As String
    Dim intRow As Integer, intcol As Integer
    Dim MIN_IDX As Integer, PRT_IDX As Integer
    MIN_IDX = 1
    PRT_IDX = 2
    
    If IsMissing(Ministers) Then _
        Ministers = GetMinisterMatrix
    
    For intRow = LBound(Ministers) To UBound(Ministers)
        With Destination
            .AddItem Ministers(intRow, MIN_IDX)
            .Column(1, intRow) = Ministers(intRow, PRT_IDX)
        End With
    Next intRow
    
    If Default And Destination.ListCount > 0 Then Destination.ListIndex = 0
    
End Sub

Sub PopulateCommitteeCodes(Destination As ComboBox, Optional Codes As Variant)
    Dim intRow As Integer
    Dim CODE_IDX As Integer, NAME_IDX As Integer
    CODE_IDX = 1
    NAME_IDX = 2
    
    If IsMissing(Codes) Then _
        Codes = GetINIGroupMatrix("CommitteeCodes")
    
    For intRow = LBound(Codes) To UBound(Codes)
        With Destination
            .AddItem Codes(intRow, NAME_IDX)
            .Column(1, intRow) = Codes(intRow, CODE_IDX)
        End With
    Next intRow
    
    If Destination.ListCount > 0 Then Destination.ListIndex = 0
End Sub

Sub PopulateWorkUnits(cboToPopulate As ComboBox, Optional Selected As String)
    Dim aWorkunits As Variant
    Dim iPos As Integer
    aWorkunits = Allfields.GetINIGroupMatrix("Workunits")
    cboToPopulate.Clear
    For iPos = LBound(aWorkunits) To UBound(aWorkunits)
        With cboToPopulate
            .AddItem aWorkunits(iPos, 2)
            .Column(1, iPos) = aWorkunits(iPos, 1)
        End With
    Next iPos
    If IsMissing(Selected) Then
        cboToPopulate.ListIndex = 0
    Else
        cboToPopulate.Value = Selected
    End If
End Sub

Function PopulateComboBox(cboToPopulate As ComboBox, GroupName As String, Optional IniFileName As String = "") As Boolean
    If IniFileName = "" Then IniFileName = strMSDGlobalPath
    IniOP.LoadIniSectionCB GroupName, cboToPopulate, IniFileName
End Function
